{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class BookmarkService {\n  constructor() {\n    this.bookmarks = [];\n  }\n  getAllBookmarks() {\n    return this.bookmarks;\n  }\n  getBookmarkById(id) {\n    return this.bookmarks.find(bookmark => bookmark.id === id);\n  }\n  addBookmark(bookmark) {\n    bookmark.id = this.generateUniqueId();\n    this.bookmarks.push(bookmark);\n  }\n  updateBookmark(updatedBookmark) {\n    const index = this.bookmarks.findIndex(b => b.id === updatedBookmark.id);\n    if (index !== -1) {\n      this.bookmarks[index] = updatedBookmark;\n    }\n  }\n  deleteBookmark(id) {\n    this.bookmarks = this.bookmarks.filter(bookmark => bookmark.id !== id);\n  }\n  // Generate a unique ID for a new bookmark\n  generateUniqueId() {\n    let maxId = 0;\n    this.bookmarks.forEach(bookmark => {\n      if (bookmark.id > maxId) {\n        maxId = bookmark.id;\n      }\n    });\n    return maxId + 1;\n  }\n}\nBookmarkService.ɵfac = function BookmarkService_Factory(t) {\n  return new (t || BookmarkService)();\n};\nBookmarkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookmarkService,\n  factory: BookmarkService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,eAAe;EAH5BC;IAIU,cAAS,GAAe,EAAE;;EAElCC,eAAe;IACb,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,eAAe,CAACC,EAAU;IACxB,OAAO,IAAI,CAACF,SAAS,CAACG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC5D;EAEAG,WAAW,CAACD,QAAkB;IAC5BA,QAAQ,CAACF,EAAE,GAAG,IAAI,CAACI,gBAAgB,EAAE;IACrC,IAAI,CAACN,SAAS,CAACO,IAAI,CAACH,QAAQ,CAAC;EAC/B;EAEAI,cAAc,CAACC,eAAyB;IACtC,MAAMC,KAAK,GAAG,IAAI,CAACV,SAAS,CAACW,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKO,eAAe,CAACP,EAAE,CAAC;IACxE,IAAIQ,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACV,SAAS,CAACU,KAAK,CAAC,GAAGD,eAAe;;EAE3C;EAEAI,cAAc,CAACX,EAAU;IACvB,IAAI,CAACF,SAAS,GAAG,IAAI,CAACA,SAAS,CAACc,MAAM,CAACV,QAAQ,IAAIA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC;EACxE;EAEA;EACQI,gBAAgB;IACtB,IAAIS,KAAK,GAAG,CAAC;IACb,IAAI,CAACf,SAAS,CAACgB,OAAO,CAACZ,QAAQ,IAAG;MAChC,IAAIA,QAAQ,CAACF,EAAE,GAAGa,KAAK,EAAE;QACvBA,KAAK,GAAGX,QAAQ,CAACF,EAAE;;IAEvB,CAAC,CAAC;IACF,OAAOa,KAAK,GAAG,CAAC;EAClB;;AApCWlB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["BookmarkService","constructor","getAllBookmarks","bookmarks","getBookmarkById","id","find","bookmark","addBookmark","generateUniqueId","push","updateBookmark","updatedBookmark","index","findIndex","b","deleteBookmark","filter","maxId","forEach","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aneet\\OneDrive\\Documents\\CTU\\WIL\\SLD\\WIL_Project_1\\ClientApp\\src\\app\\Services\\bookmark.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Bookmark } from '../Models/bookmark.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookmarkService {\n  private bookmarks: Bookmark[] = [];\n\n  getAllBookmarks(): Bookmark[] {\n    return this.bookmarks;\n  }\n\n  getBookmarkById(id: number): Bookmark | undefined {\n    return this.bookmarks.find(bookmark => bookmark.id === id);\n  }\n\n  addBookmark(bookmark: Bookmark): void {\n    bookmark.id = this.generateUniqueId();\n    this.bookmarks.push(bookmark);\n  }\n\n  updateBookmark(updatedBookmark: Bookmark): void {\n    const index = this.bookmarks.findIndex(b => b.id === updatedBookmark.id);\n    if (index !== -1) {\n      this.bookmarks[index] = updatedBookmark;\n    }\n  }\n\n  deleteBookmark(id: number): void {\n    this.bookmarks = this.bookmarks.filter(bookmark => bookmark.id !== id);\n  }\n\n  // Generate a unique ID for a new bookmark\n  private generateUniqueId(): number {\n    let maxId = 0;\n    this.bookmarks.forEach(bookmark => {\n      if (bookmark.id > maxId) {\n        maxId = bookmark.id;\n      }\n    });\n    return maxId + 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}